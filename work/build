#!/bin/bash

set -e -x

# Note: This specific script was used in GitPod IDE in GitHub, change directory/path incase you'll use it.
# Note: This script is based/from thecatvoid's build script: https://github.com/thecatvoid/actions_kernel_build

# Setup missing packages (always, since it gitpod's instance always going back it its default state) 
sudo apt-get install flex bc cpio build-essential openssl libssl-dev libfl-dev -y

# Set HOME Path, it call your current root directory as your HOME dir.
HOME="${PWD}"

# Work Path, this will be your main working folder.
WORK="${HOME}/work"

# Kernel Source, this should be your kernel source repository and it's branch.
KERNEL_SOURCE_URL="https://github.com/cd-Crypton/android_kernel_oneplus_sm6225"
KERNEL_BRANCH="android13-staging"

# Kernel/Device Name, change it based on your device, of course.
KERNEL="kernel"

# Kernel Source Path, this will be your kernel source directory after clone.
KERNEL_SRC="${WORK}/${KERNEL}"

# Clang URL - Change the version, depends on your kernel source.
CLANG_TAR_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android12-release/clang-r416183b.tar.gz"

# Utilities URL x86_x64 - Change it depends on your preference.
GAS_BIN="https://android.googlesource.com/platform/prebuilts/gas/linux-x86"
GAS_BRANCH="android-12.1.0_r0.27"

# AnyKernel3 Repo (Change it if you have different repo) - Credits to osm0sis
AK3="https://github.com/cd-Crypton/AnyKernel3"
AK3_BRANCH="flashable"

# Prepare Directory
mkdir -p "${WORK}"
cd "${WORK}" || exit 1

# Cloning all the Necessary files
if [ ! -d .clang ]; then mkdir .clang && curl -Lsq "${CLANG_TAR_URL}" -o clang.tgz && tar -xzf clang.tgz -C .clang; fi
[ ! -d .gas ] && git clone --depth=1 "${GAS_BIN}" -b ${GAS_BRANCH} .gas
[ ! -d ${KERNEL} ] && git clone --depth=1 "${KERNEL_SOURCE_URL}" -b ${KERNEL_BRANCH} ${KERNEL}
[ ! -d AnyKernel3 ] && git clone --depth=1 "${AK3}" -b ${AK3_BRANCH} AnyKernel3

# Setting Toolchain Path
PATH="${WORK}/.clang/bin:${WORK}/.gas:/bin:${PATH}"

# Cleanup OUT Directory, in case there's already out folder.
rm -rf clang.tgz

# Preparing Build Process
cd "${KERNEL_SRC}" || exit 1

# Create Make Function
make_fun() {
    make O=${WORK}/out ARCH=arm64 LLVM=1 \
		CROSS_COMPILE=aarch64-linux-gnu- \
		CROSS_COMPILE_COMPAT=arm-linux-gnueabi- "$@" 
}

# Prepare _defconfig - Change it base on your choice in arm/../configs/
make_fun vendor/bengal-perf_defconfig

# Start Compiling Kernel with build.log
make_fun -j3 2>&1 | tee ../../build.log

# Move it to AnyKernel3 Image.gz if exist
if [ -f ${WORK}/out/arch/arm64/boot/Image.gz ]; then
    cd ${WORK}/out/arch/arm64/boot
	cp -r Image.gz ${WORK}/AnyKernel3
else
    echo "Kernel did not exist at all!"
	exit 1
fi

# Zip Kernel, DO NOT FORGET TO CHANGE DEVICE NAME TARGET
cd ${WORK}/AnyKernel3
rm -rf Image* *AnyKernel*.zip
git restore .
dates="$(date +%F+%T%z)"
sed -i 's/maguro/RMX3521/' anykernel.sh
zip -r9 RMX3521-AnyKernel3-${dates}.zip * -x .git README.md *placeholder